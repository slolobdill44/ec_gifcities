// Copyright 2020 Fastly, Inc.

// Fastly is a namespace for allowing:
//   * as-fetch to interact with Fastly Compute@Edge
//   * Interact with Fastly Specific APIs

import { Request, Response, Body, Headers } from "@fastly/as-fetch";

import { RequestHandle, ResponseHandle, BodyHandle } from "./abi/abi";

import { FastlyUpstreamRequest } from "./fastly-upstream/fastly-upstream-request";
import { FastlyPendingUpstreamRequest } from "./fastly-upstream/fastly-pending-upstream-request";
import { FastlyUpstreamResponse } from "./fastly-upstream/fastly-upstream-response";
import { FastlyDownstreamRequest } from "./fastly-downstream/fastly-downstream-request";
import { FastlyDownstreamResponse } from "./fastly-downstream/fastly-downstream-response";

import { CacheOverride } from "./cache-override";
import { WriteableBodyStream } from "./stream/writeable-body-stream";
import { LogEndpoint } from "./log-endpoint";

export { CacheOverride } from "./cache-override";
export {
  ReadableBodyStream,
  ReadableBodyStreamReader,
  ReadResponse,
} from "./stream/readable-body-stream";
export {
  WriteableBodyStream,
  WriteableBodyStreamWriter,
} from "./stream/writeable-body-stream";
export { FetchPool, FufilledRequest } from "./fetch-pool";
export { LogEndpoint } from "./log-endpoint";

// Using the word client as it is some similar
// contextually to C@E and service worker FetchEvent

/**
 * Function to get the downstream request from the client.
 * This can only be called once per execution.
 *
 * @returns an `as-fetch` {@linkcode Request} Object representing the client request.
 */
export function getClientRequest(): Request {
  let fastlyDownstreamRequest = new FastlyDownstreamRequest();
  return fastlyDownstreamRequest;
}

/**
 * The configuration object to apply to the Fetch.
 *
 * Similar to the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters),
 * the parameters here will be applied to the `as-fetch` {@linkcode Request} being sent in the `fetch` call.
 */
export class FetchInit {
  /**
   * The backend the request should be sent to.
   */
  backend: string;
  /**
   * An optional CacheOverride to applied to the request.
   */
  cacheOverride: CacheOverride | null;
}

/**
 * Send a an external request to fetch a resource.
 * Useful for making upstream requests to a backend.
 *
 * @param request the as-fetch Request object to fetch.
 * @param fetchInit the config object to apply to the fetch request.
 * @returns FastlyPendingUpstreamRequest for the fetched resource.
 */
export function fetch(
  request: Request,
  fetchInit: FetchInit
): FastlyPendingUpstreamRequest {
  // Convert the fetch Request, into our Fastly Request
  let fastlyUpstreamRequest = new FastlyUpstreamRequest(request.url, {
    method: request.method,
    headers: request.headers,
    body: request.arrayBuffer(),
    cacheOverride: fetchInit.cacheOverride,
  });
  let fastlyPendingUpstreamRequest = fastlyUpstreamRequest.send(
    fetchInit.backend
  );
  return fastlyPendingUpstreamRequest;
}

/**
 * Send a response back downstream to the client.
 * This is meant for sending a completed response.
 * For streaming a response, use {@linkcode Fetchly.respondWithStreaming}
 *
 * @param response The as-fetch response object representing what to respond with
 */
export function respondWith(response: Response): void {
  // Convert the fetch Response, into our Fastly Response,
  // And then send Downstream
  let body = response.arrayBuffer();
  let status = response.status;
  let headers = response.headers;

  let fastlyDownstreamResponse = new FastlyDownstreamResponse(body, {
    status: status,
    headers: headers,
    url: null,
  });
  fastlyDownstreamResponse.send();
}

/**
 * Send a response back down to the client
 * and return a stream to continue writing to the body.
 * If you don't need to stream the response, use {@linkcode Fetchly.respondWith}
 *
 * @param response The `as-fetch` {@linkcode Response} object representing what to respond with.
 * @returns WriteableBodyStream so that you can continue writing to the body.
 */
export function respondWithStreaming(response: Response): WriteableBodyStream {
  // Convert the fetch Response, into our Fastly Response,
  // And then send Downstream
  let body = response.arrayBuffer();
  let status = response.status;
  let headers = response.headers;

  let fastlyDownstreamResponse = new FastlyDownstreamResponse(body, {
    status: status,
    headers: headers,
    url: null,
  });
  return fastlyDownstreamResponse.sendStreaming();
}

/**
 * Create a logging endpoint as a part of the Fetchly endpoint.
 *
 * @param endpointName Name of the endpoint to log to.
 * @returns LogEndpoint for the endpoint name.
 */
export function getLogEndpoint(endpointName: string): LogEndpoint {
  let logEndpoint = new LogEndpoint(endpointName);
  return logEndpoint;
}
